{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","props","name","email","id","className","src","alt","CardList","robots","cardsArray","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","this","error","info","setState","React","Component","App","onSearchChange","event","searchfield","target","value","filteredRobots","filter","robot","toLowerCase","includes","length","fetch","response","json","users","ReactDOM","render","document","getElementById"],"mappings":"gMAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,2CCQCQ,EAbF,SAACC,GACZ,IAAOC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,MAAMC,EAAMH,EAANG,GAClB,OACE,sBAAKC,UAAU,uDAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAK,WACrD,gCACE,6BAAKL,IACL,4BAAIC,WCcGK,EAnBA,SAACP,GACd,IAAOQ,EAASR,EAATQ,OAEDC,EAAaD,EAAOE,KAAI,SAACC,EAAKC,GAClC,OAAQ,cAAC,EAAD,CAENT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,OAHZM,EAAOI,GAAGT,OAOnB,OACE,8BACEM,KCDSI,EAfC,SAACb,GACf,IAAOc,EAAgBd,EAAhBc,aACP,OACE,qBAAKV,UAAU,MAAf,SACE,uBACEA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCGHI,EATA,SAAClB,GACd,OACE,qBAAKmB,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,SAAlE,SACGtB,EAAMuB,YCoBEC,G,wDAtBb,WAAYxB,GAAO,IAAD,8BAChB,cAAMA,IACDyB,MAAM,CACTC,UAAU,GAHI,E,0CAOlB,WACE,OAAGC,KAAKF,MAAMC,SACL,8DAEAC,KAAK3B,MAAMuB,W,+BAKtB,SAAkBK,EAAMC,GACtBF,KAAKG,SAAS,CAACJ,UAAS,Q,GAlBDK,IAAMC,YCwElBC,E,kDAvDb,aAAc,IAAD,8BACX,gBAOFC,eAAe,SAACC,GAEd,EAAKL,SAAS,CAACM,YAAY,GAAD,OAAID,EAAME,OAAOC,UAR3C,EAAKb,MAAM,CACPjB,OAAQ,GACR4B,YAAa,IAJN,E,0CAab,WAAS,IAAD,OAGAG,EAAeZ,KAAKF,MAAMjB,OAAOgC,QAAO,SAAAC,GAAK,OACjDA,EAAMxC,KAAKyC,cAAcC,SAAS,EAAKlB,MAAMW,YAAYM,kBAG3D,OAA8B,IAA3Bf,KAAKF,MAAMjB,OAAOoC,OACZ,oBAAIxC,UAAU,KAAd,qBAGL,sBAAKA,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,0BACA,cAAC,EAAD,CAAWU,aAAca,KAAKO,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAU1B,OAAQ+B,a,+BAY9B,WAAoB,IAAD,OACjBM,MAAM,8CACHpD,MAAK,SAACqD,GACL,OAAOA,EAASC,UAEjBtD,MAAK,SAACuD,GACL,EAAKlB,SAAS,CAACtB,OAAOwC,W,GAhDZjB,IAAMC,WCXxBiB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1B9D,M","file":"static/js/main.169ae3e1.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nconst Card = (props)=>{\r\n  const {name,email,id} = props; //props.name.....\r\n  return(\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 '>\r\n      <img src={`https://robohash.org/${id}?200*200`} alt ='robots'/>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nimport Card from './Card.js';\r\n\r\nconst CardList=(props)=>{\r\n  const {robots} =props;\r\n  //when you do a loop, you have to give a unique key to identify uniqly each item in the loop in case of update etc...\r\n  const cardsArray = robots.map((user,i) =>{\r\n    return (<Card \r\n      key={robots[i].id} \r\n      id={robots[i].id} \r\n      name={robots[i].name} \r\n      email={robots[i].email}/>);\r\n    }\r\n  );\r\n\r\n  return(\r\n    <div>\r\n     {cardsArray}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=(props)=>{\r\n  const {searchChange} = props;\r\n  return (\r\n    <div className='pa2'>\r\n      <input \r\n        className='pa3 ba b--green bg-lightest-blue' \r\n        type='search' \r\n        placeholder='search robots' \r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n//<scroll>props.children</scroll> \r\n//we use style property which is jsx way of doing css\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{overflowY:'scroll', border:'1px solid black', height:'700px'}}>\r\n      {props.children}\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\n//this cathces the error end renders the our desired output error.\r\n//if there is no error, then it executes the componenets in between <ErrorBoundry>props.children </ErrorBoundry> \r\nclass ErrorBoundry extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      hasError: false\r\n    }\r\n  }\r\n  \r\n  render(){\r\n    if(this.state.hasError){\r\n      return <h1>Ooops! Something went wrong.</h1>\r\n    }else{\r\n      return this.props.children;\r\n    }\r\n  }\r\n\r\n  //when the error occurs, we change the state using follwing lifecycle method\r\n  componentDidCatch(error,info){\r\n    this.setState({hasError:true});\r\n  }\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport CardList from '../components/CardList.js';\r\n//import {robots} from './robots.js'; //since robots.js doesnt do default export we use{}\r\nimport SearchBox from '../components/SearchBox.js';\r\nimport Scroll from '../components/Scroll.js';\r\nimport './App.css';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\n\r\n//to perform search, we need to use state to communicate to b/w cardlist and search box.\r\n//prop: is property. its just an input of the function and doesnt change. when we use it in building component, we call it pure componenet.\r\n//STATE: is an object that describes the application. It changes\r\n//parent componenet sets the state of the child component. That particular state becomes prep of the child component which can not change. \r\n//we should use state to change property that we give to componenet.\r\n//ex:<cardlist robots={robots}/> the robots input should change according to the search. \r\n//<Scroll>//allows to Scroll\r\n//<ErrorBoundry> allows to catch error\r\n\r\n//For using state in the component, we need to create component as a class not as a function.\r\n//the Class componenet always has Render() which returns something.\r\nclass App extends React.Component{\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n        robots: [],\r\n        searchfield: ''\r\n    }\r\n  }\r\n  //js method\r\n  onSearchChange=(event)=>{\r\n    //event.target.value gives the value of search keyword\r\n    this.setState({searchfield:`${event.target.value}`});\r\n  }\r\n\r\n  render(){\r\n    //filter the robots by using string method include()\r\n    //filter iterates over all the robots array.\r\n    const filteredRobots=this.state.robots.filter(robot =>\r\n      robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n    );\r\n    \r\n    if(this.state.robots.length===0){//if the api is slow display loading\r\n      return <h1 className='tc'>Loading</h1>;\r\n    }else{\r\n      return (\r\n        <div className='tc'>\r\n          <h1 className='f1'>Robo Friends</h1>\r\n          <SearchBox searchChange={this.onSearchChange}/>\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots}/>\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n\r\n\r\n  }\r\n\r\n  //load robots info from the API instead of robots.js\r\n  //this is called life cylce hook\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users') //get the data from API\r\n      .then((response) => { //convert the input response to json fille and return.\r\n        return response.json();\r\n      })\r\n      .then((users) =>{//the json file has the users list which is input to the setstate method.\r\n        this.setState({robots:users});\r\n      })\r\n    ;\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nimport App from './containers/App.js';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}